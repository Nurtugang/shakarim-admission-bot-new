from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from api.models import KnowledgeBase
from shakarim_admission_bot.firebase_config import firebase_db
import time

class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –≤ SQLite'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞',
        )
        parser.add_argument(
            '--clear-existing',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ SQLite –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        clear_existing = options['clear_existing']

        self.stdout.write("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase –≤ SQLite...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ SQLite
        existing_count = KnowledgeBase.objects.count()
        if existing_count > 0:
            self.stdout.write(
                f"‚ö†Ô∏è  –í SQLite —É–∂–µ –µ—Å—Ç—å {existing_count} –∑–∞–ø–∏—Å–µ–π"
            )
            if clear_existing:
                if not dry_run:
                    KnowledgeBase.objects.all().delete()
                    self.stdout.write("üóëÔ∏è  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    self.stdout.write("üóëÔ∏è  [DRY RUN] –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        try:
            self.stdout.write("üì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase...")
            start_time = time.time()
            
            docs = firebase_db.collection("knowledge-base").get()
            firebase_data = []
            
            for doc in docs:
                doc_data = doc.to_dict()
                if 'category' in doc_data and 'text' in doc_data:
                    firebase_data.append({
                        'firebase_id': doc.id,
                        'category': doc_data['category'],
                        'text': doc_data['text']
                    })
                else:
                    self.stdout.write(
                        f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç {doc.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"
                    )

            fetch_time = time.time() - start_time
            self.stdout.write(
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(firebase_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Firebase –∑–∞ {fetch_time:.2f} —Å–µ–∫"
            )

        except Exception as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Firebase: {e}")

        if not firebase_data:
            self.stdout.write("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in firebase_data:
            category = item['category']
            categories[category] = categories.get(category, 0) + 1

        self.stdout.write("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in categories.items():
            self.stdout.write(f"   ‚Ä¢ {category}: {count} –∑–∞–ø–∏—Å–µ–π")

        # Dry run - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if dry_run:
            self.stdout.write("\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:")
            for i, item in enumerate(firebase_data[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                self.stdout.write(
                    f"   {i+1}. [{item['category']}] {item['text'][:100]}..."
                )
            if len(firebase_data) > 3:
                self.stdout.write(f"   ... –∏ –µ—â–µ {len(firebase_data) - 3} –∑–∞–ø–∏—Å–µ–π")
            
            self.stdout.write(
                f"\n‚úÖ [DRY RUN] –ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(firebase_data)} –∑–∞–ø–∏—Å–µ–π"
            )
            return

        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write(f"\nüíæ –ü–µ—Ä–µ–Ω–æ—Å–∏–º {len(firebase_data)} –∑–∞–ø–∏—Å–µ–π –≤ SQLite...")
        
        try:
            with transaction.atomic():
                start_time = time.time()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                sqlite_objects = []
                for item in firebase_data:
                    sqlite_objects.append(
                        KnowledgeBase(
                            category=item['category'],
                            text=item['text']
                        )
                    )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                KnowledgeBase.objects.bulk_create(sqlite_objects)
                
                transfer_time = time.time() - start_time
                self.stdout.write(
                    f"‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {transfer_time:.2f} —Å–µ–∫"
                )

        except Exception as e:
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_count = KnowledgeBase.objects.count()
        self.stdout.write(
            f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í SQLite —Ç–µ–ø–µ—Ä—å {final_count} –∑–∞–ø–∏—Å–µ–π"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ SQLite
        from django.db.models import Count
        sqlite_categories = KnowledgeBase.objects.values('category').annotate(
            count=Count('category')
        ).order_by('category')

        self.stdout.write("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ SQLite:")
        for item in sqlite_categories:
            self.stdout.write(f"   ‚Ä¢ {item['category']}: {item['count']} –∑–∞–ø–∏—Å–µ–π")